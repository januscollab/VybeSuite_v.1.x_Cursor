// UserManagement Component with Service Role Key Support
import React, { useState, useEffect } from 'react';
import { Search, Plus, Trash2, Edit, UserCheck, Mail } from 'lucide-react';
import { supabase, getAdminClient, isAdminEnabled } from '../../lib/supabase';
import { PulsingDotsLoader } from '../LoadingSpinner';
import { UserDeleteModal } from './UserDeleteModal';
import { UserFormModal } from './UserFormModal';
import { debug } from '../../utils/debug';
interface User {
    id: string;
    email: string;
    role: string;
    created_at: string;
    last_sign_in_at: string | null | undefined;
    email_confirmed_at: string | null;
    user_metadata: {
        first_name?: string;
        last_name?: string;
    };
}
export const UserManagement: React.FC = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [loading, setLoading] = useState(true);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedUser, setSelectedUser] = useState<User | null>(null);
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [showUserModal, setShowUserModal] = useState(false);
    const [editingUser, setEditingUser] = useState<User | null>(null);
    const [actionLoading, setActionLoading] = useState<Record<string, boolean>>({});
    const [adminWarning, setAdminWarning] = useState<string | null>(null);
    const loadUsers = async () => {
        try {
            setLoading(true);
            setAdminWarning(null);
            if (!isAdminEnabled()) {
                setAdminWarning('Admin operations require service role key configuration');
                // Fallback to current user only
                const { data: { user: currentUser } } = await supabase.auth.getUser();
                if (currentUser) {
                    setUsers([{
                            id: currentUser.id,
                            email: currentUser.email || '',
                            role: 'super_admin' as string,
                            created_at: currentUser.created_at || '',
                            last_sign_in_at: (currentUser.last_sign_in_at ?? null) as string | null,
                            email_confirmed_at: (currentUser.email_confirmed_at ?? null) as string | null,
                            user_metadata: currentUser.user_metadata || {}
                        } as User]);
                }
                return;
            }
            // Use admin client to get all users
            const adminClient = getAdminClient();
            const { data: authUsers, error: authError } = await adminClient.auth.admin.listUsers();
            if (authError) {
                debug.error('UserManagement', `Auth error: ${authError.message}`, { error: authError });
                throw authError;
            }
            // Get user roles
            const { data: userRoles, error: rolesError } = await supabase
                .from('user_roles')
                .select('user_id, role');
            if (rolesError) {
                debug.error('UserManagement', `Failed to fetch user roles`, { error: rolesError });
                // Continue without roles if needed
            }
            // Combine user data with roles
            const usersWithRoles = authUsers.users.map(user => ({
                id: user.id,
                email: user.email || '',
                role: userRoles?.find(r => r.user_id === user.id)?.role || 'user',
                created_at: user.created_at,
                last_sign_in_at: user.last_sign_in_at,
                email_confirmed_at: user.email_confirmed_at,
                user_metadata: user.user_metadata || {}
            }));
            // Fix the type mismatch by ensuring email_confirmed_at is either a string or null
            const usersWithRolesFixed = usersWithRoles.map(user => ({
                ...user,
                email_confirmed_at: user.email_confirmed_at || null
            }));
            setUsers(usersWithRolesFixed);
            debug.info('UserManagement', `Successfully loaded users`);
        }
        catch (err) {
            debug.error('UserManagement', `Failed to load users`, { error: err });
            setAdminWarning('Failed to load users. Check console for details.');
            // Fallback: Show current user
            const { data: { user: currentUser } } = await supabase.auth.getUser();
            if (currentUser) {
                setUsers([{
                        id: currentUser.id,
                        email: currentUser.email || '',
                        role: 'super_admin',
                        created_at: currentUser.created_at || '',
                        last_sign_in_at: currentUser.last_sign_in_at ?? null,
                        email_confirmed_at: currentUser.email_confirmed_at ?? null,
                        user_metadata: currentUser.user_metadata || {}
                    }]);
            }
        }
        finally {
            setLoading(false);
        }
    };
    useEffect(() => {
        loadUsers();
    }, []);
    const filteredUsers = users.filter(user => user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
        `${user.user_metadata.first_name || ''} ${user.user_metadata.last_name || ''}`.toLowerCase().includes(searchQuery.toLowerCase()));
    const handleDeleteUser = (user: User) => {
        setSelectedUser(user);
        setShowDeleteModal(true);
    };
    const handleEditUser = (user: User) => {
        setEditingUser(user);
        setShowUserModal(true);
    };
    const handleCreateUser = () => {
        if (!isAdminEnabled()) {
            alert('User creation requires service role key configuration');
            return;
        }
        setEditingUser(null);
        setShowUserModal(true);
    };
    const handleUserDeleted = () => {
        setShowDeleteModal(false);
        setSelectedUser(null);
        loadUsers();
    };
    const handleUserSaved = () => {
        setShowUserModal(false);
        setEditingUser(null);
        loadUsers();
    };
    const handleResetPassword = async (user: User) => {
        const actionId = `reset-${user.id}`;
        setActionLoading(prev => ({ ...prev, [actionId]: true }));
        try {
            if (isAdminEnabled()) {
                // Use admin API for password reset
                const adminClient = getAdminClient();
                const { error } = await adminClient.auth.admin.generateLink({
                    type: 'recovery',
                    email: user.email
                });
                if (error)
                    throw error;
            }
            else {
                // Check if resetPasswordForEmail exists (not available in mock client)
                if ('resetPasswordForEmail' in supabase.auth) {
                    const { error } = await (supabase.auth as any).resetPasswordForEmail(user.email, {
                        redirectTo: `${window.location.origin}/auth/reset-password`
                    });
                    if (error)
                        throw error;
                }
                else {
                    throw new Error('Password reset not available in development mode');
                }
            }
            alert(`Password reset email sent to ${user.email}`);
        }
        catch (err) {
            debug.error('UserManagement', `Password reset failed`, { error: err, userEmail: user.email });
            alert('Failed to send password reset email');
        }
        finally {
            setActionLoading(prev => ({ ...prev, [actionId]: false }));
        }
    };
    const getDisplayName = (user: User) => {
        const firstName = user.user_metadata.first_name || '';
        const lastName = user.user_metadata.last_name || '';
        const fullName = `${firstName} ${lastName}`.trim();
        return fullName || user.email.split('@')[0];
    };
    const getInitials = (user: User) => {
        const firstName = user.user_metadata.first_name || '';
        const lastName = user.user_metadata.last_name || '';
        if (firstName && lastName) {
            return `${firstName[0]}${lastName[0]}`.toUpperCase();
        }
        return user.email[0].toUpperCase();
    };
    if (loading) {
        return (<div className="flex items-center justify-center h-full">
        <PulsingDotsLoader />
      </div>);
    }
    return (<div className="p-6">
      {/* Warning Banner */}
      {adminWarning && (<div className="mb-6 p-4 bg-warning-light border border-warning rounded-lg">
          <p className="text-warning-dark">{adminWarning}</p>
        </div>)}

      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-text-primary">User Management</h1>
        <button onClick={handleCreateUser} className="flex items-center gap-2 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors" disabled={!isAdminEnabled()}>
          <Plus className="w-4 h-4"/>
          <span>Add User</span>
        </button>
      </div>

      {/* Search Bar */}
      <div className="relative mb-6">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-text-quaternary w-5 h-5"/>
        <input type="text" placeholder="Search users..." value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="w-full pl-10 pr-4 py-2 bg-bg-secondary border border-border-default rounded-lg focus:outline-none focus:ring-2 focus:ring-primary/20 text-text-primary placeholder-text-tertiary"/>
      </div>

      {/* User List */}
      <div className="bg-bg-secondary border border-border-default rounded-lg overflow-hidden">
        <table className="w-full">
          <thead>
            <tr className="bg-bg-tertiary border-b border-border-default">
              <th className="px-6 py-3 text-left text-sm font-semibold text-text-secondary">User</th>
              <th className="px-6 py-3 text-left text-sm font-semibold text-text-secondary">Email</th>
              <th className="px-6 py-3 text-left text-sm font-semibold text-text-secondary">Role</th>
              <th className="px-6 py-3 text-left text-sm font-semibold text-text-secondary">Status</th>
              <th className="px-6 py-3 text-right text-sm font-semibold text-text-secondary">Actions</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-border-default">
            {filteredUsers.map(user => (<tr key={user.id} className="hover:bg-bg-tertiary">
                <td className="px-6 py-4">
                  <div className="flex items-center gap-3">
                    <div className="w-8 h-8 rounded-full bg-primary/10 text-primary flex items-center justify-center text-sm font-medium">
                      {getInitials(user)}
                    </div>
                    <span className="text-text-primary font-medium">{getDisplayName(user)}</span>
                  </div>
                </td>
                <td className="px-6 py-4 text-text-secondary">{user.email}</td>
                <td className="px-6 py-4">
                  <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary/10 text-primary">
                    {user.role}
                  </span>
                </td>
                <td className="px-6 py-4">
                  <div className="flex items-center gap-2">
                    {user.email_confirmed_at ? (<>
                        <UserCheck className="w-4 h-4 text-success"/>
                        <span className="text-text-secondary text-sm">Verified</span>
                      </>) : (<>
                        <Mail className="w-4 h-4 text-warning"/>
                        <span className="text-text-secondary text-sm">Pending</span>
                      </>)}
                  </div>
                </td>
                <td className="px-6 py-4 text-right">
                  <div className="flex items-center justify-end gap-2">
                    <button onClick={() => handleResetPassword(user)} disabled={actionLoading[`reset-${user.id}`] || !isAdminEnabled()} className="p-2 text-text-tertiary hover:text-text-secondary rounded-lg transition-colors disabled:opacity-50" title="Reset Password">
                      {actionLoading[`reset-${user.id}`] ? (<PulsingDotsLoader size="sm"/>) : (<Mail className="w-4 h-4"/>)}
                    </button>
                    <button onClick={() => handleEditUser(user)} disabled={!isAdminEnabled()} className="p-2 text-text-tertiary hover:text-text-secondary rounded-lg transition-colors disabled:opacity-50" title="Edit User">
                      <Edit className="w-4 h-4"/>
                    </button>
                    <button onClick={() => handleDeleteUser(user)} disabled={!isAdminEnabled()} className="p-2 text-text-tertiary hover:text-error rounded-lg transition-colors disabled:opacity-50" title="Delete User">
                      <Trash2 className="w-4 h-4"/>
                    </button>
                  </div>
                </td>
              </tr>))}
          </tbody>
        </table>
      </div>

      {/* Modals */}
      {showDeleteModal && selectedUser && (<UserDeleteModal user={selectedUser as any} isOpen={showDeleteModal} onClose={() => setShowDeleteModal(false)} onDeleted={handleUserDeleted}/>)}
      {showUserModal && (<UserFormModal user={editingUser as any} onClose={() => setShowUserModal(false)} onSaved={handleUserSaved}/>)}
    </div>);
};
